{"ast":null,"code":"var _jsxFileName = \"/home/andrequites/UDACITY_FULL_STACK/bookshelf/frontend/src/App.js\";\nimport React, { Component } from 'react';\nimport $ from 'jquery';\nimport './stylesheets/App.css';\nimport FormView from './components/FormView';\nimport Book from './components/Book';\n\nclass App extends Component {\n  constructor(props) {\n    super();\n\n    this.getBooks = () => {\n      $.ajax({\n        url: \"localhost:5000/books?page=\".concat(this.state.page),\n        //TODO: update request URL\n        type: \"GET\",\n        crossDomain: true,\n        success: result => {\n          this.setState({\n            totalBooks: result.total_books,\n            books: result.books\n          });\n          return;\n        },\n        error: error => {\n          alert('Unable to load books (is it a CORS problem?). Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.deleteBook = id => {\n      if (window.confirm('Are you sure you want to delete the book?')) {\n        $.ajax({\n          url: \"/books/\".concat(id),\n          //TODO: update request URL\n          type: \"DELETE\",\n          success: result => {\n            this.getBooks();\n          },\n          error: error => {\n            alert('Unable to delete the book.');\n            return;\n          }\n        });\n      }\n    };\n\n    this.changeRating = (id, rating) => {\n      let books = [...this.state.books];\n      let targetBook = books.find(book => book.id === id);\n      $.ajax({\n        url: \"/books/\".concat(id),\n        //TODO: update request URL\n        type: \"PATCH\",\n        dataType: 'json',\n        contentType: 'application/json',\n        data: JSON.stringify({\n          'rating': rating\n        }),\n        success: result => {\n          targetBook.rating = rating;\n          this.setState({\n            books\n          });\n        },\n        error: error => {\n          alert('Unable to update the rating.');\n          return;\n        }\n      });\n    };\n\n    this.searchBooks = search => {\n      $.ajax({\n        url: '/books',\n        //TODO: update request URL\n        type: \"POST\",\n        dataType: 'json',\n        contentType: 'application/json',\n        data: JSON.stringify({\n          search: search\n        }),\n        xhrFields: {\n          withCredentials: true\n        },\n        crossDomain: true,\n        success: result => {\n          this.setState({\n            totalBooks: result.total_books,\n            books: result.books,\n            page: 1\n          });\n          document.getElementById(\"search-form\").reset();\n          return;\n        },\n        error: error => {\n          alert('Unable to complete search. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.state = {\n      page: 1,\n      totalBooks: 0,\n      books: []\n    };\n  }\n\n  componentDidMount() {\n    this.getBooks();\n  }\n\n  selectPage(num) {\n    this.setState({\n      page: num\n    }, () => this.getBooks());\n  }\n\n  createPagination() {\n    let pageNumbers = [];\n    let maxPage = Math.ceil(this.state.totalBooks / 8);\n\n    for (let i = 1; i <= maxPage; i++) {\n      pageNumbers.push(React.createElement(\"div\", {\n        key: i,\n        className: \"page-num \".concat(i === this.state.page ? 'active' : ''),\n        onClick: () => {\n          this.selectPage(i);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, \" \", i, \" \"));\n    }\n\n    return pageNumbers;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"main-view\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"bookshelf-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \" \", this.state.books.map(book => React.createElement(Book, Object.assign({\n      key: book.id,\n      deleteBook: this.deleteBook,\n      changeRating: this.changeRating\n    }, book, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }))), \" \"), \" \", React.createElement(\"div\", {\n      className: \"pagination-menu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \" \", this.createPagination(), \" \"), \" \"), \" \", React.createElement(FormView, {\n      searchBooks: this.searchBooks,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }), \" \");\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/andrequites/UDACITY_FULL_STACK/bookshelf/frontend/src/App.js"],"names":["React","Component","$","FormView","Book","App","constructor","props","getBooks","ajax","url","state","page","type","crossDomain","success","result","setState","totalBooks","total_books","books","error","alert","deleteBook","id","window","confirm","changeRating","rating","targetBook","find","book","dataType","contentType","data","JSON","stringify","searchBooks","search","xhrFields","withCredentials","document","getElementById","reset","componentDidMount","selectPage","num","createPagination","pageNumbers","maxPage","Math","ceil","i","push","render","map"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport $ from 'jquery';\n\nimport './stylesheets/App.css';\nimport FormView from './components/FormView';\nimport Book from './components/Book';\n\n\nclass App extends Component {\n    constructor(props) {\n        super();\n        this.state = {\n            page: 1,\n            totalBooks: 0,\n            books: []\n        }\n    }\n\n    getBooks = () => {\n        $.ajax({\n            url: `localhost:5000/books?page=${this.state.page}`, //TODO: update request URL\n            type: \"GET\",\n            crossDomain: true,\n            success: (result) => {\n                this.setState({\n                    totalBooks: result.total_books,\n                    books: result.books\n                })\n                return;\n            },\n            error: (error) => {\n                alert('Unable to load books (is it a CORS problem?). Please try your request again')\n                return;\n            }\n        })\n    }\n\n    deleteBook = (id) => {\n        if (window.confirm('Are you sure you want to delete the book?')) {\n            $.ajax({\n                url: `/books/${id}`, //TODO: update request URL\n                type: \"DELETE\",\n                success: (result) => {\n                    this.getBooks();\n                },\n                error: (error) => {\n                    alert('Unable to delete the book.')\n                    return;\n                }\n            })\n        }\n    }\n\n    changeRating = (id, rating) => {\n        let books = [...this.state.books]\n        let targetBook = books.find((book) => book.id === id);\n\n        $.ajax({\n            url: `/books/${id}`, //TODO: update request URL\n            type: \"PATCH\",\n            dataType: 'json',\n            contentType: 'application/json',\n            data: JSON.stringify({ 'rating': rating }),\n            success: (result) => {\n                targetBook.rating = rating\n                this.setState({ books })\n            },\n            error: (error) => {\n                alert('Unable to update the rating.')\n                return;\n            }\n        })\n    }\n\n    searchBooks = (search) => {\n        $.ajax({\n            url: '/books', //TODO: update request URL\n            type: \"POST\",\n            dataType: 'json',\n            contentType: 'application/json',\n            data: JSON.stringify({ search: search }),\n            xhrFields: {\n                withCredentials: true\n            },\n            crossDomain: true,\n            success: (result) => {\n                this.setState({\n                    totalBooks: result.total_books,\n                    books: result.books,\n                    page: 1\n                })\n                document.getElementById(\"search-form\").reset();\n                return;\n            },\n            error: (error) => {\n                alert('Unable to complete search. Please try your request again')\n                return;\n            }\n        })\n    }\n\n\n    componentDidMount() {\n        this.getBooks()\n    }\n\n    selectPage(num) {\n        this.setState({ page: num }, () => this.getBooks());\n    }\n\n    createPagination() {\n        let pageNumbers = [];\n        let maxPage = Math.ceil(this.state.totalBooks / 8)\n        for (let i = 1; i <= maxPage; i++) {\n            pageNumbers.push( <\n                div key = { i }\n                className = { `page-num ${i === this.state.page ? 'active' : ''}` }\n                onClick = {\n                    () => { this.selectPage(i) }\n                } > { i } <\n                /div>)\n            }\n            return pageNumbers;\n        }\n\n        render() {\n            return ( <\n                div className = \"App\" >\n                <\n                div id = \"main-view\" >\n                <\n                div className = \"bookshelf-container\" > {\n                    this.state.books.map((book) => ( <\n                        Book key = { book.id }\n                        deleteBook = { this.deleteBook }\n                        changeRating = { this.changeRating } {...book }\n                        />\n                    ))\n                } <\n                /div> <\n                div className = \"pagination-menu\" > { this.createPagination() } <\n                /div> < /\n                div > <\n                FormView searchBooks = { this.searchBooks }\n                /> < /\n                div >\n            );\n\n        }\n    }\n\n    export default App;"]},"metadata":{},"sourceType":"module"}